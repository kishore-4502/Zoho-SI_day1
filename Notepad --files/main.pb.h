// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_main_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_main_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_main_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_main_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_main_2eproto;
class Notepad;
struct NotepadDefaultTypeInternal;
extern NotepadDefaultTypeInternal _Notepad_default_instance_;
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserList;
struct UserListDefaultTypeInternal;
extern UserListDefaultTypeInternal _UserList_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Notepad* Arena::CreateMaybeMessage<::Notepad>(Arena*);
template<> ::Project* Arena::CreateMaybeMessage<::Project>(Arena*);
template<> ::User* Arena::CreateMaybeMessage<::User>(Arena*);
template<> ::UserList* Arena::CreateMaybeMessage<::UserList>(Arena*);
template<> ::Version* Arena::CreateMaybeMessage<::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 3,
    kLocationFieldNumber = 5,
    kUserIdFieldNumber = 6,
    kAgeFieldNumber = 4,
  };
  // string userName = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string location = 5;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string userId = 6;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // int32 age = 4;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    int32_t age_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class UserList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserList) */ {
 public:
  inline UserList() : UserList(nullptr) {}
  ~UserList() override;
  explicit PROTOBUF_CONSTEXPR UserList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserList(const UserList& from);
  UserList(UserList&& from) noexcept
    : UserList() {
    *this = ::std::move(from);
  }

  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserList& operator=(UserList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserList* internal_default_instance() {
    return reinterpret_cast<const UserList*>(
               &_UserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserList& a, UserList& b) {
    a.Swap(&b);
  }
  inline void Swap(UserList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserList& from) {
    UserList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserList";
  }
  protected:
  explicit UserList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .User users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >*
      mutable_users();
  private:
  const ::User& _internal_users(int index) const;
  ::User* _internal_add_users();
  public:
  const ::User& users(int index) const;
  ::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >&
      users() const;

  // @@protoc_insertion_point(class_scope:UserList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User > users_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  explicit PROTOBUF_CONSTEXPR Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Project& from) {
    Project::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 4,
    kNameFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kVersionsFieldNumber = 5,
    kIdFieldNumber = 2,
  };
  // repeated string text = 4;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text();
  private:
  const std::string& _internal_text(int index) const;
  std::string* _internal_add_text();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string userId = 3;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // .Version versions = 5;
  bool has_versions() const;
  private:
  bool _internal_has_versions() const;
  public:
  void clear_versions();
  const ::Version& versions() const;
  PROTOBUF_NODISCARD ::Version* release_versions();
  ::Version* mutable_versions();
  void set_allocated_versions(::Version* versions);
  private:
  const ::Version& _internal_versions() const;
  ::Version* _internal_mutable_versions();
  public:
  void unsafe_arena_set_allocated_versions(
      ::Version* versions);
  ::Version* unsafe_arena_release_versions();

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::Version* versions_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class Notepad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Notepad) */ {
 public:
  inline Notepad() : Notepad(nullptr) {}
  ~Notepad() override;
  explicit PROTOBUF_CONSTEXPR Notepad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Notepad(const Notepad& from);
  Notepad(Notepad&& from) noexcept
    : Notepad() {
    *this = ::std::move(from);
  }

  inline Notepad& operator=(const Notepad& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notepad& operator=(Notepad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Notepad& default_instance() {
    return *internal_default_instance();
  }
  static inline const Notepad* internal_default_instance() {
    return reinterpret_cast<const Notepad*>(
               &_Notepad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Notepad& a, Notepad& b) {
    a.Swap(&b);
  }
  inline void Swap(Notepad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notepad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Notepad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Notepad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Notepad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Notepad& from) {
    Notepad::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notepad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Notepad";
  }
  protected:
  explicit Notepad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectsFieldNumber = 1,
  };
  // repeated .Project projects = 1;
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  ::Project* mutable_projects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Project >*
      mutable_projects();
  private:
  const ::Project& _internal_projects(int index) const;
  ::Project* _internal_add_projects();
  public:
  const ::Project& projects(int index) const;
  ::Project* add_projects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Project >&
      projects() const;

  // @@protoc_insertion_point(class_scope:Notepad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Project > projects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// -------------------------------------------------------------------

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Version& from) {
    Version::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedTimeFieldNumber = 4,
    kVersionsAvailableFieldNumber = 5,
    kProjectIdFieldNumber = 3,
    kChangesCountFieldNumber = 1,
    kVersionNumberFieldNumber = 2,
  };
  // repeated string createdTime = 4;
  int createdtime_size() const;
  private:
  int _internal_createdtime_size() const;
  public:
  void clear_createdtime();
  const std::string& createdtime(int index) const;
  std::string* mutable_createdtime(int index);
  void set_createdtime(int index, const std::string& value);
  void set_createdtime(int index, std::string&& value);
  void set_createdtime(int index, const char* value);
  void set_createdtime(int index, const char* value, size_t size);
  std::string* add_createdtime();
  void add_createdtime(const std::string& value);
  void add_createdtime(std::string&& value);
  void add_createdtime(const char* value);
  void add_createdtime(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& createdtime() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_createdtime();
  private:
  const std::string& _internal_createdtime(int index) const;
  std::string* _internal_add_createdtime();
  public:

  // repeated .Project versionsAvailable = 5;
  int versionsavailable_size() const;
  private:
  int _internal_versionsavailable_size() const;
  public:
  void clear_versionsavailable();
  ::Project* mutable_versionsavailable(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Project >*
      mutable_versionsavailable();
  private:
  const ::Project& _internal_versionsavailable(int index) const;
  ::Project* _internal_add_versionsavailable();
  public:
  const ::Project& versionsavailable(int index) const;
  ::Project* add_versionsavailable();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Project >&
      versionsavailable() const;

  // string projectId = 3;
  void clear_projectid();
  const std::string& projectid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_projectid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_projectid();
  PROTOBUF_NODISCARD std::string* release_projectid();
  void set_allocated_projectid(std::string* projectid);
  private:
  const std::string& _internal_projectid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_projectid(const std::string& value);
  std::string* _internal_mutable_projectid();
  public:

  // int32 changesCount = 1;
  void clear_changescount();
  int32_t changescount() const;
  void set_changescount(int32_t value);
  private:
  int32_t _internal_changescount() const;
  void _internal_set_changescount(int32_t value);
  public:

  // int32 versionNumber = 2;
  void clear_versionnumber();
  int32_t versionnumber() const;
  void set_versionnumber(int32_t value);
  private:
  int32_t _internal_versionnumber() const;
  void _internal_set_versionnumber(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> createdtime_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Project > versionsavailable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectid_;
    int32_t changescount_;
    int32_t versionnumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_main_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// string userName = 1;
inline void User::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& User::username() const {
  // @@protoc_insertion_point(field_get:User.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.userName)
}
inline std::string* User::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:User.userName)
  return _s;
}
inline const std::string& User::_internal_username() const {
  return _impl_.username_.Get();
}
inline void User::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:User.userName)
  return _impl_.username_.Release();
}
inline void User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.userName)
}

// string password = 2;
inline void User::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& User::password() const {
  // @@protoc_insertion_point(field_get:User.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.password)
}
inline std::string* User::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:User.password)
  return _s;
}
inline const std::string& User::_internal_password() const {
  return _impl_.password_.Get();
}
inline void User::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:User.password)
  return _impl_.password_.Release();
}
inline void User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.password)
}

// string email = 3;
inline void User::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& User::email() const {
  // @@protoc_insertion_point(field_get:User.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.email)
}
inline std::string* User::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:User.email)
  return _s;
}
inline const std::string& User::_internal_email() const {
  return _impl_.email_.Get();
}
inline void User::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:User.email)
  return _impl_.email_.Release();
}
inline void User::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.email)
}

// int32 age = 4;
inline void User::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t User::_internal_age() const {
  return _impl_.age_;
}
inline int32_t User::age() const {
  // @@protoc_insertion_point(field_get:User.age)
  return _internal_age();
}
inline void User::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void User::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:User.age)
}

// string location = 5;
inline void User::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& User::location() const {
  // @@protoc_insertion_point(field_get:User.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.location)
}
inline std::string* User::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:User.location)
  return _s;
}
inline const std::string& User::_internal_location() const {
  return _impl_.location_.Get();
}
inline void User::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_location() {
  // @@protoc_insertion_point(field_release:User.location)
  return _impl_.location_.Release();
}
inline void User::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.location)
}

// string userId = 6;
inline void User::clear_userid() {
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& User::userid() const {
  // @@protoc_insertion_point(field_get:User.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_userid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.userid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.userId)
}
inline std::string* User::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:User.userId)
  return _s;
}
inline const std::string& User::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void User::_internal_set_userid(const std::string& value) {
  
  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_userid() {
  
  return _impl_.userid_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_userid() {
  // @@protoc_insertion_point(field_release:User.userId)
  return _impl_.userid_.Release();
}
inline void User::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  _impl_.userid_.SetAllocated(userid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.userId)
}

// -------------------------------------------------------------------

// UserList

// repeated .User users = 1;
inline int UserList::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int UserList::users_size() const {
  return _internal_users_size();
}
inline void UserList::clear_users() {
  _impl_.users_.Clear();
}
inline ::User* UserList::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:UserList.users)
  return _impl_.users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >*
UserList::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:UserList.users)
  return &_impl_.users_;
}
inline const ::User& UserList::_internal_users(int index) const {
  return _impl_.users_.Get(index);
}
inline const ::User& UserList::users(int index) const {
  // @@protoc_insertion_point(field_get:UserList.users)
  return _internal_users(index);
}
inline ::User* UserList::_internal_add_users() {
  return _impl_.users_.Add();
}
inline ::User* UserList::add_users() {
  ::User* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:UserList.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::User >&
UserList::users() const {
  // @@protoc_insertion_point(field_list:UserList.users)
  return _impl_.users_;
}

// -------------------------------------------------------------------

// Project

// string name = 1;
inline void Project::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:Project.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.name)
}
inline std::string* Project::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Project.name)
  return _s;
}
inline const std::string& Project::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Project::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_name() {
  // @@protoc_insertion_point(field_release:Project.name)
  return _impl_.name_.Release();
}
inline void Project::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Project.name)
}

// int32 id = 2;
inline void Project::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Project::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Project::id() const {
  // @@protoc_insertion_point(field_get:Project.id)
  return _internal_id();
}
inline void Project::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Project::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Project.id)
}

// string userId = 3;
inline void Project::clear_userid() {
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& Project::userid() const {
  // @@protoc_insertion_point(field_get:Project.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_userid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.userid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.userId)
}
inline std::string* Project::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:Project.userId)
  return _s;
}
inline const std::string& Project::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void Project::_internal_set_userid(const std::string& value) {
  
  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_userid() {
  
  return _impl_.userid_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_userid() {
  // @@protoc_insertion_point(field_release:Project.userId)
  return _impl_.userid_.Release();
}
inline void Project::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  _impl_.userid_.SetAllocated(userid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Project.userId)
}

// repeated string text = 4;
inline int Project::_internal_text_size() const {
  return _impl_.text_.size();
}
inline int Project::text_size() const {
  return _internal_text_size();
}
inline void Project::clear_text() {
  _impl_.text_.Clear();
}
inline std::string* Project::add_text() {
  std::string* _s = _internal_add_text();
  // @@protoc_insertion_point(field_add_mutable:Project.text)
  return _s;
}
inline const std::string& Project::_internal_text(int index) const {
  return _impl_.text_.Get(index);
}
inline const std::string& Project::text(int index) const {
  // @@protoc_insertion_point(field_get:Project.text)
  return _internal_text(index);
}
inline std::string* Project::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:Project.text)
  return _impl_.text_.Mutable(index);
}
inline void Project::set_text(int index, const std::string& value) {
  _impl_.text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Project.text)
}
inline void Project::set_text(int index, std::string&& value) {
  _impl_.text_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Project.text)
}
inline void Project::set_text(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Project.text)
}
inline void Project::set_text(int index, const char* value, size_t size) {
  _impl_.text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Project.text)
}
inline std::string* Project::_internal_add_text() {
  return _impl_.text_.Add();
}
inline void Project::add_text(const std::string& value) {
  _impl_.text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Project.text)
}
inline void Project::add_text(std::string&& value) {
  _impl_.text_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Project.text)
}
inline void Project::add_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Project.text)
}
inline void Project::add_text(const char* value, size_t size) {
  _impl_.text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Project.text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Project::text() const {
  // @@protoc_insertion_point(field_list:Project.text)
  return _impl_.text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Project::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:Project.text)
  return &_impl_.text_;
}

// .Version versions = 5;
inline bool Project::_internal_has_versions() const {
  return this != internal_default_instance() && _impl_.versions_ != nullptr;
}
inline bool Project::has_versions() const {
  return _internal_has_versions();
}
inline void Project::clear_versions() {
  if (GetArenaForAllocation() == nullptr && _impl_.versions_ != nullptr) {
    delete _impl_.versions_;
  }
  _impl_.versions_ = nullptr;
}
inline const ::Version& Project::_internal_versions() const {
  const ::Version* p = _impl_.versions_;
  return p != nullptr ? *p : reinterpret_cast<const ::Version&>(
      ::_Version_default_instance_);
}
inline const ::Version& Project::versions() const {
  // @@protoc_insertion_point(field_get:Project.versions)
  return _internal_versions();
}
inline void Project::unsafe_arena_set_allocated_versions(
    ::Version* versions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.versions_);
  }
  _impl_.versions_ = versions;
  if (versions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Project.versions)
}
inline ::Version* Project::release_versions() {
  
  ::Version* temp = _impl_.versions_;
  _impl_.versions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Version* Project::unsafe_arena_release_versions() {
  // @@protoc_insertion_point(field_release:Project.versions)
  
  ::Version* temp = _impl_.versions_;
  _impl_.versions_ = nullptr;
  return temp;
}
inline ::Version* Project::_internal_mutable_versions() {
  
  if (_impl_.versions_ == nullptr) {
    auto* p = CreateMaybeMessage<::Version>(GetArenaForAllocation());
    _impl_.versions_ = p;
  }
  return _impl_.versions_;
}
inline ::Version* Project::mutable_versions() {
  ::Version* _msg = _internal_mutable_versions();
  // @@protoc_insertion_point(field_mutable:Project.versions)
  return _msg;
}
inline void Project::set_allocated_versions(::Version* versions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.versions_;
  }
  if (versions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(versions);
    if (message_arena != submessage_arena) {
      versions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, versions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.versions_ = versions;
  // @@protoc_insertion_point(field_set_allocated:Project.versions)
}

// -------------------------------------------------------------------

// Notepad

// repeated .Project projects = 1;
inline int Notepad::_internal_projects_size() const {
  return _impl_.projects_.size();
}
inline int Notepad::projects_size() const {
  return _internal_projects_size();
}
inline void Notepad::clear_projects() {
  _impl_.projects_.Clear();
}
inline ::Project* Notepad::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:Notepad.projects)
  return _impl_.projects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Project >*
Notepad::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:Notepad.projects)
  return &_impl_.projects_;
}
inline const ::Project& Notepad::_internal_projects(int index) const {
  return _impl_.projects_.Get(index);
}
inline const ::Project& Notepad::projects(int index) const {
  // @@protoc_insertion_point(field_get:Notepad.projects)
  return _internal_projects(index);
}
inline ::Project* Notepad::_internal_add_projects() {
  return _impl_.projects_.Add();
}
inline ::Project* Notepad::add_projects() {
  ::Project* _add = _internal_add_projects();
  // @@protoc_insertion_point(field_add:Notepad.projects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Project >&
Notepad::projects() const {
  // @@protoc_insertion_point(field_list:Notepad.projects)
  return _impl_.projects_;
}

// -------------------------------------------------------------------

// Version

// int32 changesCount = 1;
inline void Version::clear_changescount() {
  _impl_.changescount_ = 0;
}
inline int32_t Version::_internal_changescount() const {
  return _impl_.changescount_;
}
inline int32_t Version::changescount() const {
  // @@protoc_insertion_point(field_get:Version.changesCount)
  return _internal_changescount();
}
inline void Version::_internal_set_changescount(int32_t value) {
  
  _impl_.changescount_ = value;
}
inline void Version::set_changescount(int32_t value) {
  _internal_set_changescount(value);
  // @@protoc_insertion_point(field_set:Version.changesCount)
}

// int32 versionNumber = 2;
inline void Version::clear_versionnumber() {
  _impl_.versionnumber_ = 0;
}
inline int32_t Version::_internal_versionnumber() const {
  return _impl_.versionnumber_;
}
inline int32_t Version::versionnumber() const {
  // @@protoc_insertion_point(field_get:Version.versionNumber)
  return _internal_versionnumber();
}
inline void Version::_internal_set_versionnumber(int32_t value) {
  
  _impl_.versionnumber_ = value;
}
inline void Version::set_versionnumber(int32_t value) {
  _internal_set_versionnumber(value);
  // @@protoc_insertion_point(field_set:Version.versionNumber)
}

// string projectId = 3;
inline void Version::clear_projectid() {
  _impl_.projectid_.ClearToEmpty();
}
inline const std::string& Version::projectid() const {
  // @@protoc_insertion_point(field_get:Version.projectId)
  return _internal_projectid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_projectid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.projectid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Version.projectId)
}
inline std::string* Version::mutable_projectid() {
  std::string* _s = _internal_mutable_projectid();
  // @@protoc_insertion_point(field_mutable:Version.projectId)
  return _s;
}
inline const std::string& Version::_internal_projectid() const {
  return _impl_.projectid_.Get();
}
inline void Version::_internal_set_projectid(const std::string& value) {
  
  _impl_.projectid_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_projectid() {
  
  return _impl_.projectid_.Mutable(GetArenaForAllocation());
}
inline std::string* Version::release_projectid() {
  // @@protoc_insertion_point(field_release:Version.projectId)
  return _impl_.projectid_.Release();
}
inline void Version::set_allocated_projectid(std::string* projectid) {
  if (projectid != nullptr) {
    
  } else {
    
  }
  _impl_.projectid_.SetAllocated(projectid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectid_.IsDefault()) {
    _impl_.projectid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Version.projectId)
}

// repeated string createdTime = 4;
inline int Version::_internal_createdtime_size() const {
  return _impl_.createdtime_.size();
}
inline int Version::createdtime_size() const {
  return _internal_createdtime_size();
}
inline void Version::clear_createdtime() {
  _impl_.createdtime_.Clear();
}
inline std::string* Version::add_createdtime() {
  std::string* _s = _internal_add_createdtime();
  // @@protoc_insertion_point(field_add_mutable:Version.createdTime)
  return _s;
}
inline const std::string& Version::_internal_createdtime(int index) const {
  return _impl_.createdtime_.Get(index);
}
inline const std::string& Version::createdtime(int index) const {
  // @@protoc_insertion_point(field_get:Version.createdTime)
  return _internal_createdtime(index);
}
inline std::string* Version::mutable_createdtime(int index) {
  // @@protoc_insertion_point(field_mutable:Version.createdTime)
  return _impl_.createdtime_.Mutable(index);
}
inline void Version::set_createdtime(int index, const std::string& value) {
  _impl_.createdtime_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Version.createdTime)
}
inline void Version::set_createdtime(int index, std::string&& value) {
  _impl_.createdtime_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Version.createdTime)
}
inline void Version::set_createdtime(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.createdtime_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Version.createdTime)
}
inline void Version::set_createdtime(int index, const char* value, size_t size) {
  _impl_.createdtime_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Version.createdTime)
}
inline std::string* Version::_internal_add_createdtime() {
  return _impl_.createdtime_.Add();
}
inline void Version::add_createdtime(const std::string& value) {
  _impl_.createdtime_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Version.createdTime)
}
inline void Version::add_createdtime(std::string&& value) {
  _impl_.createdtime_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Version.createdTime)
}
inline void Version::add_createdtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.createdtime_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Version.createdTime)
}
inline void Version::add_createdtime(const char* value, size_t size) {
  _impl_.createdtime_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Version.createdTime)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Version::createdtime() const {
  // @@protoc_insertion_point(field_list:Version.createdTime)
  return _impl_.createdtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Version::mutable_createdtime() {
  // @@protoc_insertion_point(field_mutable_list:Version.createdTime)
  return &_impl_.createdtime_;
}

// repeated .Project versionsAvailable = 5;
inline int Version::_internal_versionsavailable_size() const {
  return _impl_.versionsavailable_.size();
}
inline int Version::versionsavailable_size() const {
  return _internal_versionsavailable_size();
}
inline void Version::clear_versionsavailable() {
  _impl_.versionsavailable_.Clear();
}
inline ::Project* Version::mutable_versionsavailable(int index) {
  // @@protoc_insertion_point(field_mutable:Version.versionsAvailable)
  return _impl_.versionsavailable_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Project >*
Version::mutable_versionsavailable() {
  // @@protoc_insertion_point(field_mutable_list:Version.versionsAvailable)
  return &_impl_.versionsavailable_;
}
inline const ::Project& Version::_internal_versionsavailable(int index) const {
  return _impl_.versionsavailable_.Get(index);
}
inline const ::Project& Version::versionsavailable(int index) const {
  // @@protoc_insertion_point(field_get:Version.versionsAvailable)
  return _internal_versionsavailable(index);
}
inline ::Project* Version::_internal_add_versionsavailable() {
  return _impl_.versionsavailable_.Add();
}
inline ::Project* Version::add_versionsavailable() {
  ::Project* _add = _internal_add_versionsavailable();
  // @@protoc_insertion_point(field_add:Version.versionsAvailable)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Project >&
Version::versionsavailable() const {
  // @@protoc_insertion_point(field_list:Version.versionsAvailable)
  return _impl_.versionsavailable_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_main_2eproto
