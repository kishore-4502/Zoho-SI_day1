// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: version.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_version_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_version_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_version_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_version_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_version_2eproto;
class Changes;
struct ChangesDefaultTypeInternal;
extern ChangesDefaultTypeInternal _Changes_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Changes* Arena::CreateMaybeMessage<::Changes>(Arena*);
template<> ::Version* Arena::CreateMaybeMessage<::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Changes_change : int {
  Changes_change_ADD = 0,
  Changes_change_REMOVE = 1,
  Changes_change_UPDATE = 2,
  Changes_change_Changes_change_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Changes_change_Changes_change_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Changes_change_IsValid(int value);
constexpr Changes_change Changes_change_change_MIN = Changes_change_ADD;
constexpr Changes_change Changes_change_change_MAX = Changes_change_UPDATE;
constexpr int Changes_change_change_ARRAYSIZE = Changes_change_change_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Changes_change_descriptor();
template<typename T>
inline const std::string& Changes_change_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Changes_change>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Changes_change_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Changes_change_descriptor(), enum_t_value);
}
inline bool Changes_change_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Changes_change* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Changes_change>(
    Changes_change_descriptor(), name, value);
}
// ===================================================================

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Version& from) {
    Version::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedTimeFieldNumber = 4,
    kProjectIdFieldNumber = 3,
    kChangesCountFieldNumber = 1,
    kVersionNumberFieldNumber = 2,
  };
  // repeated string createdTime = 4;
  int createdtime_size() const;
  private:
  int _internal_createdtime_size() const;
  public:
  void clear_createdtime();
  const std::string& createdtime(int index) const;
  std::string* mutable_createdtime(int index);
  void set_createdtime(int index, const std::string& value);
  void set_createdtime(int index, std::string&& value);
  void set_createdtime(int index, const char* value);
  void set_createdtime(int index, const char* value, size_t size);
  std::string* add_createdtime();
  void add_createdtime(const std::string& value);
  void add_createdtime(std::string&& value);
  void add_createdtime(const char* value);
  void add_createdtime(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& createdtime() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_createdtime();
  private:
  const std::string& _internal_createdtime(int index) const;
  std::string* _internal_add_createdtime();
  public:

  // string projectId = 3;
  void clear_projectid();
  const std::string& projectid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_projectid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_projectid();
  PROTOBUF_NODISCARD std::string* release_projectid();
  void set_allocated_projectid(std::string* projectid);
  private:
  const std::string& _internal_projectid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_projectid(const std::string& value);
  std::string* _internal_mutable_projectid();
  public:

  // int32 changesCount = 1;
  void clear_changescount();
  int32_t changescount() const;
  void set_changescount(int32_t value);
  private:
  int32_t _internal_changescount() const;
  void _internal_set_changescount(int32_t value);
  public:

  // int32 versionNumber = 2;
  void clear_versionnumber();
  int32_t versionnumber() const;
  void set_versionnumber(int32_t value);
  private:
  int32_t _internal_versionnumber() const;
  void _internal_set_versionnumber(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> createdtime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectid_;
    int32_t changescount_;
    int32_t versionnumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_version_2eproto;
};
// -------------------------------------------------------------------

class Changes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Changes) */ {
 public:
  inline Changes() : Changes(nullptr) {}
  ~Changes() override;
  explicit PROTOBUF_CONSTEXPR Changes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Changes(const Changes& from);
  Changes(Changes&& from) noexcept
    : Changes() {
    *this = ::std::move(from);
  }

  inline Changes& operator=(const Changes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Changes& operator=(Changes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Changes& default_instance() {
    return *internal_default_instance();
  }
  static inline const Changes* internal_default_instance() {
    return reinterpret_cast<const Changes*>(
               &_Changes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Changes& a, Changes& b) {
    a.Swap(&b);
  }
  inline void Swap(Changes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Changes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Changes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Changes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Changes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Changes& from) {
    Changes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Changes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Changes";
  }
  protected:
  explicit Changes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Changes_change change;
  static constexpr change ADD =
    Changes_change_ADD;
  static constexpr change REMOVE =
    Changes_change_REMOVE;
  static constexpr change UPDATE =
    Changes_change_UPDATE;
  static inline bool change_IsValid(int value) {
    return Changes_change_IsValid(value);
  }
  static constexpr change change_MIN =
    Changes_change_change_MIN;
  static constexpr change change_MAX =
    Changes_change_change_MAX;
  static constexpr int change_ARRAYSIZE =
    Changes_change_change_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  change_descriptor() {
    return Changes_change_descriptor();
  }
  template<typename T>
  static inline const std::string& change_Name(T enum_t_value) {
    static_assert(::std::is_same<T, change>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function change_Name.");
    return Changes_change_Name(enum_t_value);
  }
  static inline bool change_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      change* value) {
    return Changes_change_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLineNumFieldNumber = 1,
    kActionFieldNumber = 2,
    kChangesFieldNumber = 3,
    kCreatedTimeFieldNumber = 5,
    kIdFieldNumber = 6,
    kChangesCountFieldNumber = 4,
  };
  // repeated int32 lineNum = 1;
  int linenum_size() const;
  private:
  int _internal_linenum_size() const;
  public:
  void clear_linenum();
  private:
  int32_t _internal_linenum(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_linenum() const;
  void _internal_add_linenum(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_linenum();
  public:
  int32_t linenum(int index) const;
  void set_linenum(int index, int32_t value);
  void add_linenum(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      linenum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_linenum();

  // repeated .Changes.change action = 2;
  int action_size() const;
  private:
  int _internal_action_size() const;
  public:
  void clear_action();
  private:
  ::Changes_change _internal_action(int index) const;
  void _internal_add_action(::Changes_change value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_action();
  public:
  ::Changes_change action(int index) const;
  void set_action(int index, ::Changes_change value);
  void add_action(::Changes_change value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& action() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_action();

  // repeated string changes = 3;
  int changes_size() const;
  private:
  int _internal_changes_size() const;
  public:
  void clear_changes();
  const std::string& changes(int index) const;
  std::string* mutable_changes(int index);
  void set_changes(int index, const std::string& value);
  void set_changes(int index, std::string&& value);
  void set_changes(int index, const char* value);
  void set_changes(int index, const char* value, size_t size);
  std::string* add_changes();
  void add_changes(const std::string& value);
  void add_changes(std::string&& value);
  void add_changes(const char* value);
  void add_changes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& changes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_changes();
  private:
  const std::string& _internal_changes(int index) const;
  std::string* _internal_add_changes();
  public:

  // repeated string createdTime = 5;
  int createdtime_size() const;
  private:
  int _internal_createdtime_size() const;
  public:
  void clear_createdtime();
  const std::string& createdtime(int index) const;
  std::string* mutable_createdtime(int index);
  void set_createdtime(int index, const std::string& value);
  void set_createdtime(int index, std::string&& value);
  void set_createdtime(int index, const char* value);
  void set_createdtime(int index, const char* value, size_t size);
  std::string* add_createdtime();
  void add_createdtime(const std::string& value);
  void add_createdtime(std::string&& value);
  void add_createdtime(const char* value);
  void add_createdtime(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& createdtime() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_createdtime();
  private:
  const std::string& _internal_createdtime(int index) const;
  std::string* _internal_add_createdtime();
  public:

  // repeated string id = 6;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  const std::string& id(int index) const;
  std::string* mutable_id(int index);
  void set_id(int index, const std::string& value);
  void set_id(int index, std::string&& value);
  void set_id(int index, const char* value);
  void set_id(int index, const char* value, size_t size);
  std::string* add_id();
  void add_id(const std::string& value);
  void add_id(std::string&& value);
  void add_id(const char* value);
  void add_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_id();
  private:
  const std::string& _internal_id(int index) const;
  std::string* _internal_add_id();
  public:

  // int32 changesCount = 4;
  void clear_changescount();
  int32_t changescount() const;
  void set_changescount(int32_t value);
  private:
  int32_t _internal_changescount() const;
  void _internal_set_changescount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Changes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > linenum_;
    mutable std::atomic<int> _linenum_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> action_;
    mutable std::atomic<int> _action_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> changes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> createdtime_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> id_;
    int32_t changescount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_version_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Version

// int32 changesCount = 1;
inline void Version::clear_changescount() {
  _impl_.changescount_ = 0;
}
inline int32_t Version::_internal_changescount() const {
  return _impl_.changescount_;
}
inline int32_t Version::changescount() const {
  // @@protoc_insertion_point(field_get:Version.changesCount)
  return _internal_changescount();
}
inline void Version::_internal_set_changescount(int32_t value) {
  
  _impl_.changescount_ = value;
}
inline void Version::set_changescount(int32_t value) {
  _internal_set_changescount(value);
  // @@protoc_insertion_point(field_set:Version.changesCount)
}

// int32 versionNumber = 2;
inline void Version::clear_versionnumber() {
  _impl_.versionnumber_ = 0;
}
inline int32_t Version::_internal_versionnumber() const {
  return _impl_.versionnumber_;
}
inline int32_t Version::versionnumber() const {
  // @@protoc_insertion_point(field_get:Version.versionNumber)
  return _internal_versionnumber();
}
inline void Version::_internal_set_versionnumber(int32_t value) {
  
  _impl_.versionnumber_ = value;
}
inline void Version::set_versionnumber(int32_t value) {
  _internal_set_versionnumber(value);
  // @@protoc_insertion_point(field_set:Version.versionNumber)
}

// string projectId = 3;
inline void Version::clear_projectid() {
  _impl_.projectid_.ClearToEmpty();
}
inline const std::string& Version::projectid() const {
  // @@protoc_insertion_point(field_get:Version.projectId)
  return _internal_projectid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_projectid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.projectid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Version.projectId)
}
inline std::string* Version::mutable_projectid() {
  std::string* _s = _internal_mutable_projectid();
  // @@protoc_insertion_point(field_mutable:Version.projectId)
  return _s;
}
inline const std::string& Version::_internal_projectid() const {
  return _impl_.projectid_.Get();
}
inline void Version::_internal_set_projectid(const std::string& value) {
  
  _impl_.projectid_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_projectid() {
  
  return _impl_.projectid_.Mutable(GetArenaForAllocation());
}
inline std::string* Version::release_projectid() {
  // @@protoc_insertion_point(field_release:Version.projectId)
  return _impl_.projectid_.Release();
}
inline void Version::set_allocated_projectid(std::string* projectid) {
  if (projectid != nullptr) {
    
  } else {
    
  }
  _impl_.projectid_.SetAllocated(projectid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectid_.IsDefault()) {
    _impl_.projectid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Version.projectId)
}

// repeated string createdTime = 4;
inline int Version::_internal_createdtime_size() const {
  return _impl_.createdtime_.size();
}
inline int Version::createdtime_size() const {
  return _internal_createdtime_size();
}
inline void Version::clear_createdtime() {
  _impl_.createdtime_.Clear();
}
inline std::string* Version::add_createdtime() {
  std::string* _s = _internal_add_createdtime();
  // @@protoc_insertion_point(field_add_mutable:Version.createdTime)
  return _s;
}
inline const std::string& Version::_internal_createdtime(int index) const {
  return _impl_.createdtime_.Get(index);
}
inline const std::string& Version::createdtime(int index) const {
  // @@protoc_insertion_point(field_get:Version.createdTime)
  return _internal_createdtime(index);
}
inline std::string* Version::mutable_createdtime(int index) {
  // @@protoc_insertion_point(field_mutable:Version.createdTime)
  return _impl_.createdtime_.Mutable(index);
}
inline void Version::set_createdtime(int index, const std::string& value) {
  _impl_.createdtime_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Version.createdTime)
}
inline void Version::set_createdtime(int index, std::string&& value) {
  _impl_.createdtime_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Version.createdTime)
}
inline void Version::set_createdtime(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.createdtime_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Version.createdTime)
}
inline void Version::set_createdtime(int index, const char* value, size_t size) {
  _impl_.createdtime_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Version.createdTime)
}
inline std::string* Version::_internal_add_createdtime() {
  return _impl_.createdtime_.Add();
}
inline void Version::add_createdtime(const std::string& value) {
  _impl_.createdtime_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Version.createdTime)
}
inline void Version::add_createdtime(std::string&& value) {
  _impl_.createdtime_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Version.createdTime)
}
inline void Version::add_createdtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.createdtime_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Version.createdTime)
}
inline void Version::add_createdtime(const char* value, size_t size) {
  _impl_.createdtime_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Version.createdTime)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Version::createdtime() const {
  // @@protoc_insertion_point(field_list:Version.createdTime)
  return _impl_.createdtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Version::mutable_createdtime() {
  // @@protoc_insertion_point(field_mutable_list:Version.createdTime)
  return &_impl_.createdtime_;
}

// -------------------------------------------------------------------

// Changes

// repeated int32 lineNum = 1;
inline int Changes::_internal_linenum_size() const {
  return _impl_.linenum_.size();
}
inline int Changes::linenum_size() const {
  return _internal_linenum_size();
}
inline void Changes::clear_linenum() {
  _impl_.linenum_.Clear();
}
inline int32_t Changes::_internal_linenum(int index) const {
  return _impl_.linenum_.Get(index);
}
inline int32_t Changes::linenum(int index) const {
  // @@protoc_insertion_point(field_get:Changes.lineNum)
  return _internal_linenum(index);
}
inline void Changes::set_linenum(int index, int32_t value) {
  _impl_.linenum_.Set(index, value);
  // @@protoc_insertion_point(field_set:Changes.lineNum)
}
inline void Changes::_internal_add_linenum(int32_t value) {
  _impl_.linenum_.Add(value);
}
inline void Changes::add_linenum(int32_t value) {
  _internal_add_linenum(value);
  // @@protoc_insertion_point(field_add:Changes.lineNum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Changes::_internal_linenum() const {
  return _impl_.linenum_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Changes::linenum() const {
  // @@protoc_insertion_point(field_list:Changes.lineNum)
  return _internal_linenum();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Changes::_internal_mutable_linenum() {
  return &_impl_.linenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Changes::mutable_linenum() {
  // @@protoc_insertion_point(field_mutable_list:Changes.lineNum)
  return _internal_mutable_linenum();
}

// repeated .Changes.change action = 2;
inline int Changes::_internal_action_size() const {
  return _impl_.action_.size();
}
inline int Changes::action_size() const {
  return _internal_action_size();
}
inline void Changes::clear_action() {
  _impl_.action_.Clear();
}
inline ::Changes_change Changes::_internal_action(int index) const {
  return static_cast< ::Changes_change >(_impl_.action_.Get(index));
}
inline ::Changes_change Changes::action(int index) const {
  // @@protoc_insertion_point(field_get:Changes.action)
  return _internal_action(index);
}
inline void Changes::set_action(int index, ::Changes_change value) {
  _impl_.action_.Set(index, value);
  // @@protoc_insertion_point(field_set:Changes.action)
}
inline void Changes::_internal_add_action(::Changes_change value) {
  _impl_.action_.Add(value);
}
inline void Changes::add_action(::Changes_change value) {
  _internal_add_action(value);
  // @@protoc_insertion_point(field_add:Changes.action)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Changes::action() const {
  // @@protoc_insertion_point(field_list:Changes.action)
  return _impl_.action_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Changes::_internal_mutable_action() {
  return &_impl_.action_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Changes::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:Changes.action)
  return _internal_mutable_action();
}

// repeated string changes = 3;
inline int Changes::_internal_changes_size() const {
  return _impl_.changes_.size();
}
inline int Changes::changes_size() const {
  return _internal_changes_size();
}
inline void Changes::clear_changes() {
  _impl_.changes_.Clear();
}
inline std::string* Changes::add_changes() {
  std::string* _s = _internal_add_changes();
  // @@protoc_insertion_point(field_add_mutable:Changes.changes)
  return _s;
}
inline const std::string& Changes::_internal_changes(int index) const {
  return _impl_.changes_.Get(index);
}
inline const std::string& Changes::changes(int index) const {
  // @@protoc_insertion_point(field_get:Changes.changes)
  return _internal_changes(index);
}
inline std::string* Changes::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:Changes.changes)
  return _impl_.changes_.Mutable(index);
}
inline void Changes::set_changes(int index, const std::string& value) {
  _impl_.changes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Changes.changes)
}
inline void Changes::set_changes(int index, std::string&& value) {
  _impl_.changes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Changes.changes)
}
inline void Changes::set_changes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.changes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Changes.changes)
}
inline void Changes::set_changes(int index, const char* value, size_t size) {
  _impl_.changes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Changes.changes)
}
inline std::string* Changes::_internal_add_changes() {
  return _impl_.changes_.Add();
}
inline void Changes::add_changes(const std::string& value) {
  _impl_.changes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Changes.changes)
}
inline void Changes::add_changes(std::string&& value) {
  _impl_.changes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Changes.changes)
}
inline void Changes::add_changes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.changes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Changes.changes)
}
inline void Changes::add_changes(const char* value, size_t size) {
  _impl_.changes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Changes.changes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Changes::changes() const {
  // @@protoc_insertion_point(field_list:Changes.changes)
  return _impl_.changes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Changes::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:Changes.changes)
  return &_impl_.changes_;
}

// int32 changesCount = 4;
inline void Changes::clear_changescount() {
  _impl_.changescount_ = 0;
}
inline int32_t Changes::_internal_changescount() const {
  return _impl_.changescount_;
}
inline int32_t Changes::changescount() const {
  // @@protoc_insertion_point(field_get:Changes.changesCount)
  return _internal_changescount();
}
inline void Changes::_internal_set_changescount(int32_t value) {
  
  _impl_.changescount_ = value;
}
inline void Changes::set_changescount(int32_t value) {
  _internal_set_changescount(value);
  // @@protoc_insertion_point(field_set:Changes.changesCount)
}

// repeated string createdTime = 5;
inline int Changes::_internal_createdtime_size() const {
  return _impl_.createdtime_.size();
}
inline int Changes::createdtime_size() const {
  return _internal_createdtime_size();
}
inline void Changes::clear_createdtime() {
  _impl_.createdtime_.Clear();
}
inline std::string* Changes::add_createdtime() {
  std::string* _s = _internal_add_createdtime();
  // @@protoc_insertion_point(field_add_mutable:Changes.createdTime)
  return _s;
}
inline const std::string& Changes::_internal_createdtime(int index) const {
  return _impl_.createdtime_.Get(index);
}
inline const std::string& Changes::createdtime(int index) const {
  // @@protoc_insertion_point(field_get:Changes.createdTime)
  return _internal_createdtime(index);
}
inline std::string* Changes::mutable_createdtime(int index) {
  // @@protoc_insertion_point(field_mutable:Changes.createdTime)
  return _impl_.createdtime_.Mutable(index);
}
inline void Changes::set_createdtime(int index, const std::string& value) {
  _impl_.createdtime_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Changes.createdTime)
}
inline void Changes::set_createdtime(int index, std::string&& value) {
  _impl_.createdtime_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Changes.createdTime)
}
inline void Changes::set_createdtime(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.createdtime_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Changes.createdTime)
}
inline void Changes::set_createdtime(int index, const char* value, size_t size) {
  _impl_.createdtime_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Changes.createdTime)
}
inline std::string* Changes::_internal_add_createdtime() {
  return _impl_.createdtime_.Add();
}
inline void Changes::add_createdtime(const std::string& value) {
  _impl_.createdtime_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Changes.createdTime)
}
inline void Changes::add_createdtime(std::string&& value) {
  _impl_.createdtime_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Changes.createdTime)
}
inline void Changes::add_createdtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.createdtime_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Changes.createdTime)
}
inline void Changes::add_createdtime(const char* value, size_t size) {
  _impl_.createdtime_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Changes.createdTime)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Changes::createdtime() const {
  // @@protoc_insertion_point(field_list:Changes.createdTime)
  return _impl_.createdtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Changes::mutable_createdtime() {
  // @@protoc_insertion_point(field_mutable_list:Changes.createdTime)
  return &_impl_.createdtime_;
}

// repeated string id = 6;
inline int Changes::_internal_id_size() const {
  return _impl_.id_.size();
}
inline int Changes::id_size() const {
  return _internal_id_size();
}
inline void Changes::clear_id() {
  _impl_.id_.Clear();
}
inline std::string* Changes::add_id() {
  std::string* _s = _internal_add_id();
  // @@protoc_insertion_point(field_add_mutable:Changes.id)
  return _s;
}
inline const std::string& Changes::_internal_id(int index) const {
  return _impl_.id_.Get(index);
}
inline const std::string& Changes::id(int index) const {
  // @@protoc_insertion_point(field_get:Changes.id)
  return _internal_id(index);
}
inline std::string* Changes::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:Changes.id)
  return _impl_.id_.Mutable(index);
}
inline void Changes::set_id(int index, const std::string& value) {
  _impl_.id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Changes.id)
}
inline void Changes::set_id(int index, std::string&& value) {
  _impl_.id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Changes.id)
}
inline void Changes::set_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Changes.id)
}
inline void Changes::set_id(int index, const char* value, size_t size) {
  _impl_.id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Changes.id)
}
inline std::string* Changes::_internal_add_id() {
  return _impl_.id_.Add();
}
inline void Changes::add_id(const std::string& value) {
  _impl_.id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Changes.id)
}
inline void Changes::add_id(std::string&& value) {
  _impl_.id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Changes.id)
}
inline void Changes::add_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Changes.id)
}
inline void Changes::add_id(const char* value, size_t size) {
  _impl_.id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Changes.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Changes::id() const {
  // @@protoc_insertion_point(field_list:Changes.id)
  return _impl_.id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Changes::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:Changes.id)
  return &_impl_.id_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Changes_change> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Changes_change>() {
  return ::Changes_change_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_version_2eproto
